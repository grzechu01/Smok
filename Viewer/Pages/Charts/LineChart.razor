@using ChartJs.Blazor.LineChart
@using SmokViewer.Data
@using static SmokViewer.SampleUtils

<Chart Config="_config" @ref="_chart"></Chart>

@*<button @onclick="RandomizeData">Randomize Data</button>
    <button @onclick="AddDataset">Add Dataset</button>
    <button @onclick="RemoveDataset">Remove Dataset</button>
    <button @onclick="AddData">Add Data</button>
    <button @onclick="RemoveData">Remove Data</button>*@

@code {
    private LineConfig _config;
    private Chart _chart;
    private IEnumerable<MeasurementsDataSet> _measurements = default!;

    protected override void OnInitialized()
    {
        _config = new LineConfig
            {
                Options = new LineOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = false,
                        Text = "Temperature"
                    },
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },
                    Hover = new Hover
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },
                    Scales = new Scales
                    {
                        XAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Date"
                            },
                            Time = new TimeOptions
                            {
                                TooltipFormat = "ll HH:mm",
                                Round = TimeMeasurement.Hour
                            },
                            Distribution = TimeDistribution.Linear,
                            Bounds = ScaleBound.Ticks
                        }
                    },
                        YAxes = new List<CartesianAxis>
                        {
                            new LinearCartesianAxis
                            {
                                ScaleLabel = new ScaleLabel
                                {
                                    LabelString = "Value"
                                }
                            }
                        }
                    }
                }
            };
    }

    public void UpdateChartData(IEnumerable<MeasurementsDataSet> measurementDataSets)
    {
        _measurements = measurementDataSets;

        UpdateChart(TimeScaleOptions.Option24h);
    }

    public void UpdateChart(TimeScaleOptions options)
    {
        _config.Data.Datasets.Clear();
        foreach (var measurementDataSet in _measurements)
        {
            var data = measurementDataSet.Data;

            if (options == TimeScaleOptions.Option24h)
                data = data.Where(x => x.date > DateTime.UtcNow.AddDays(-1));
            else if (options == TimeScaleOptions.Option3d)
                data = data.Where(x => x.date > DateTime.UtcNow.AddDays(-3));
            else
                data = data.Where(x => x.date > DateTime.UtcNow.AddDays(-7));

            var results = data
              .GroupBy(x => new { x.date.Year, x.date.Month, x.date.Day, x.date.Hour })
              .Select(g => (date: new DateTime(g.Key.Year, g.Key.Month, g.Key.Day, g.Key.Hour, 0, 0), temp: g.Average(x => x.value)))
              .Select(x => new TimePoint(x.date, Math.Round(x.temp, 2))).ToList();

            IDataset<TimePoint> dataset = new LineDataset<TimePoint>(results)
                {
                    Label = measurementDataSet.Caption,
                    BackgroundColor = ColorUtil.FromDrawingColor(measurementDataSet.Color),
                    BorderColor = ColorUtil.FromDrawingColor(measurementDataSet.Color),
                    Fill = FillingMode.Disabled,
                    CubicInterpolationMode = CubicInterpolationMode.Monotone
                };

            _config.Data.Datasets.Add(dataset);
        }

        _chart.Update();
    }

    //private void RandomizeData()
    //{
    //    foreach (IDataset<int> dataset in _config.Data.Datasets)
    //    {
    //        int count = dataset.Count;
    //        dataset.Clear();
    //        dataset.AddRange(RandomScalingFactor(count));
    //    }

    //    _chart.Update();
    //}

    //private void AddDataset()
    //{
    //    string color = ColorUtil.FromDrawingColor(ChartColors.All[_config.Data.Datasets.Count % ChartColors.All.Count]);
    //    IDataset<int> dataset = new LineDataset<int>(RandomScalingFactor(_config.Data.Labels.Count))
    //        {
    //            Label = $"Dataset {_config.Data.Datasets.Count}",
    //            BackgroundColor = color,
    //            BorderColor = color,
    //            Fill = FillingMode.Disabled
    //        };

    //    _config.Data.Datasets.Add(dataset);
    //    _chart.Update();
    //}

    //private void RemoveDataset()
    //{
    //    IList<IDataset> datasets = _config.Data.Datasets;
    //    if (datasets.Count == 0)
    //        return;

    //    datasets.RemoveAt(datasets.Count - 1);
    //    _chart.Update();
    //}

    //private void AddData()
    //{
    //    if (_config.Data.Datasets.Count == 0)
    //        return;

    //    string month = Months[_config.Data.Labels.Count % Months.Count];
    //    _config.Data.Labels.Add(month);

    //    foreach (IDataset<int> dataset in _config.Data.Datasets)
    //    {
    //        dataset.Add(RandomScalingFactor());
    //    }

    //    _chart.Update();
    //}

    //private void RemoveData()
    //{
    //    if (_config.Data.Datasets.Count == 0 ||
    //        _config.Data.Labels.Count == 0)
    //    {
    //        return;
    //    }

    //    _config.Data.Labels.RemoveAt(_config.Data.Labels.Count - 1);

    //    foreach (IDataset<int> dataset in _config.Data.Datasets)
    //    {
    //        dataset.RemoveAt(dataset.Count - 1);
    //    }

    //    _chart.Update();
    //}
}
