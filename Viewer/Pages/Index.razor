@page "/"

<PageTitle>Smok</PageTitle>

@using SmokViewer.Data
@inject MeasurementsService _measurementsService

<h1>Smok</h1>



<SmokViewer.Pages.Charts.LineChart Measurements="@_measurements" />



<button @onclick="@ToggleShowDetails">Show details</button>

@if (_showDetails)
{
    @if (_measurements == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Time</th>
                    <th>Temp</th>
                    <th>Pressure</th>
                    <th>Humidity</th>
                    <th>PM1</th>
                    <th>PM2.5</th>
                    <th>PM10</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var measurement in _measurements)
                {
                    <tr>
                        <td>@measurement.Date.ToShortDateString()</td>
                        <td>@measurement.Time.ToShortTimeString()</td>
                        <td>@string.Format("{0:0.0}", measurement.Temperature)</td>
                        <td>@string.Format("{0:0}", measurement.Pressure)</td>
                        <td>@string.Format("{0:0.0}", measurement.Humidity)</td>
                        <td>@string.Format("{0:0}", measurement.PM1)</td>
                        <td>@string.Format("{0:0}", measurement.PM25)</td>
                        <td>@string.Format("{0:0}",measurement.PM10)</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private IEnumerable<Measurement> _measurements = Enumerable.Empty<Measurement>();

    private bool _showDetails = false;
    private void ToggleShowDetails() => _showDetails = !_showDetails;

    //private IEnumerable<(DateTime X, double Y)> GetDataForTempChart()
    //{
    //    return _measurements.Select(x =>
    //        (new DateTime(
    //            x.Date.Year,
    //            x.Date.Month,
    //            x.Date.Day,
    //            x.Time.Hour,
    //            x.Time.Minute,
    //            x.Time.Second),
    //        x.Temperature)).ToArray();

    //}

    protected override async Task OnInitializedAsync()
    {
        _measurements = await _measurementsService.GetMeasurements();
        StateHasChanged();
    }
}
